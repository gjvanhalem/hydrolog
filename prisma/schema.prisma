generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  name       String?
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  plants     Plant[]
  sessions   Session[]
  systemLogs SystemLog[]
  systems    UserSystem[]
}

model Session {
  id        String   @id @default(cuid())
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Plant {
  id          Int        @id @default(autoincrement())
  name        String
  type        String
  position    Int?
  status      String
  startDate   DateTime
  systemId    Int
  userId      Int
  ph_min      Decimal?   @db.Decimal(4, 2)
  ph_max      Decimal?   @db.Decimal(4, 2)
  ec_min      Decimal?   @db.Decimal(4, 2)
  ec_max      Decimal?   @db.Decimal(4, 2)
  ppm_min     Int?
  ppm_max     Int?
  external_id Int?       // Reference to the external database ID
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  system      System     @relation(fields: [systemId], references: [id], onDelete: Cascade)
  logs        PlantLog[]
}

model PlantLog {
  id        Int      @id @default(autoincrement())
  plantId   Int
  note      String?
  photo     String?
  status    String
  logDate   DateTime @default(now())
  createdAt DateTime @default(now())
  plant     Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
}

model SystemLog {
  id         Int      @id @default(autoincrement())
  type       String
  value      Float
  unit       String
  note       String?
  logDate    DateTime @default(now())
  createdAt  DateTime @default(now())
  userId     Int
  systemId   Int?
  systemName String?
  system     System?  @relation(fields: [systemId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model System {
  id              Int          @id @default(autoincrement())
  name            String
  rows            Int
  positionsPerRow Json
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  plants          Plant[]
  systemLogs      SystemLog[]
  users           UserSystem[]
}

model UserSystem {
  id        Int      @id @default(autoincrement())
  userId    Int
  systemId  Int
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  system    System   @relation(fields: [systemId], references: [id], onDelete: Cascade)

  @@unique([userId, systemId])
  @@index([userId, isActive])
}
