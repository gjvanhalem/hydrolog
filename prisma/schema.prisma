// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Corrected output path
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  password      String    // Hashed password
  plants        Plant[]
  systemLogs    SystemLog[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
}

model Session {
  id            String    @id @default(cuid())
  userId        Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
}

model Plant {
  id          Int       @id @default(autoincrement())
  name        String
  type        String
  position    Int?      // Made optional to allow for removed plants
  status      String    // e.g., "germination", "fruiting", "harvesting", "removed"
  startDate   DateTime
  logs        PlantLog[]
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PlantLog {
  id          Int       @id @default(autoincrement())
  plantId     Int
  plant       Plant     @relation(fields: [plantId], references: [id], onDelete: Cascade)
  note        String
  photo       String?   // URL or path to photo
  status      String
  logDate     DateTime  @default(now())  // The date of the log entry
  createdAt   DateTime  @default(now())
}

model SystemLog {
  id          Int       @id @default(autoincrement())
  type        String    // e.g., "water_refill", "ph_measurement", "ec_measurement", "tds_measurement", "temperature"
  value       Float     // The measured value
  unit        String    // e.g., "pH", "µS/cm", "ppm", "°C"
  note        String?
  logDate     DateTime  @default(now())  // The date of the log entry
  createdAt   DateTime  @default(now())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
