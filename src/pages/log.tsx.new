// filepath: c:\Users\gjvan\Projects\hydrolog\src\pages\log.tsx
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import '../app/globals.css';
import { PlantLog, SystemLog, Status } from '../types';

const LogPage: React.FC = () => {
  const router = useRouter();
  const [logType, setLogType] = useState<'plant' | 'system' | null>(null);
  const [statuses, setStatuses] = useState<Status[]>([]);

  const [plantLog, setPlantLog] = useState<PlantLog>({
    date: new Date().toISOString().split('T')[0],
    status: '', // Dynamic default value will be set after fetching statuses
    position: '', // Added position property
    photoUrl: '',
    notes: '',
  });

  const [systemLog, setSystemLog] = useState<SystemLog>({
    date: new Date().toISOString().split('T')[0],
    waterRefill: false,
    pH: null, // Changed to null
    EC: null, // Changed to null
    TDS: null, // Changed to null
    temperature: null, // Changed to null
    notes: '',
  });

  useEffect(() => {
    console.log('Fetching statuses...');
    fetch('http://localhost:5000/api/statuses')
      .then((response) => {
        if (!response.ok) {
          throw new Error('Failed to fetch statuses');
        }
        return response.json();
      })
      .then((data) => {
        console.log('Fetched statuses:', data);
        setStatuses(data);
        if (data.length > 0) {
          setPlantLog((prev) => ({ ...prev, status: data[0].name }));
        }
      })
      .catch((error) => {
        console.error('Error fetching statuses:', error);
      });
  }, []);

  const handlePlantLogChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    console.log(`PlantLog Change - Field: ${name}, Value: ${value}`);
    if (name === 'position') {
      console.log('Updating position field');
    }
    setPlantLog((prev: PlantLog) => {
      if (prev[name as keyof PlantLog] === value) {
        console.log('No state update needed for PlantLog');
        return prev; // Avoid unnecessary state updates
      }
      const updatedState = { ...prev, [name]: value };
      console.log('Updated PlantLog state:', updatedState);
      return updatedState;
    });
  };

  const handleSystemLogChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    console.log(`SystemLog Change - Field: ${name}, Value: ${value}`);
    setSystemLog((prev) => {
      if (prev[name as keyof SystemLog] === value) {
        console.log('No state update needed for SystemLog');
        return prev; // Avoid unnecessary state updates
      }
      console.log('Updating SystemLog state');
      return { ...prev, [name]: value };
    });
  };

  const handleSubmitPlantLog = () => {
    console.log('Plant Log:', plantLog);
    fetch('http://localhost:5000/api/plant-logs', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(plantLog),
    })
      .then((response) => response.json())
      .then((data) => {
        console.log('Plant Log Saved:', data);
        router.push('/history');
      });
  };

  const handleSubmitSystemLog = () => {
    console.log('System Log:', systemLog);
    fetch('http://localhost:5000/api/system-logs', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(systemLog),
    })
      .then((response) => response.json())
      .then((data) => {
        console.log('System Log Saved:', data);
        router.push('/history');
      });
  };

  return (
    <div className="container mx-auto">
      <div className="p-4">
        <h1 className="text-2xl font-bold">Log</h1>
        <p className="mt-4">Create and manage your plant and system logs below:</p>
        <div className="mt-4">
          {!logType && (
            <div className="mb-4">
              <button
                onClick={() => setLogType('plant')}
                className="bg-blue-500 text-white p-2 rounded mr-2 hover:bg-blue-600"
              >
                Add Plant Log
              </button>
              <button
                onClick={() => setLogType('system')}
                className="bg-green-500 text-white p-2 rounded hover:bg-green-600"
              >
                Add System Log
              </button>
            </div>
          )}

          {logType === 'plant' && (
            <div>
              <h2 className="text-xl font-semibold mb-2">Plant Log</h2>
              <input
                type="date"
                name="date"
                value={plantLog.date}
                onChange={handlePlantLogChange}
                className="border p-2 rounded mb-2 w-full"
              />
              <select
                name="status"
                value={plantLog.status}
                onChange={handlePlantLogChange}
                className="browser-default"
              >
                {statuses.map((status) => (
                  <option key={status.id} value={status.name}>
                    {status.name}
                  </option>
                ))}
              </select>
              <input
                type="text"
                name="position"
                placeholder="Position in the system"
                value={plantLog.position}
                onChange={handlePlantLogChange}
                className="border p-2 rounded mb-2 w-full"
              />
              <input
                type="file"
                name="photoUrl"
                onChange={(e) =>
                  setPlantLog((prev: PlantLog) => ({ ...prev, photoUrl: e.target.files?.[0]?.name || '' }))
                }
                className="border p-2 rounded mb-2 w-full"
              />
              <textarea
                name="notes"
                value={plantLog.notes}
                onChange={handlePlantLogChange}
                placeholder="Notes"
                className="border p-2 rounded mb-2 w-full"
              />
              <button
                onClick={handleSubmitPlantLog}
                className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600"
              >
                Submit Plant Log
              </button>
              <button
                onClick={() => setLogType(null)}
                className="bg-gray-500 text-white p-2 rounded ml-2 hover:bg-gray-600"
              >
                Cancel
              </button>
            </div>
          )}

          {logType === 'system' && (
            <div>
              <h2 className="text-xl font-semibold mb-2">System Log</h2>
              <input
                type="date"
                name="date"
                value={systemLog.date}
                onChange={handleSystemLogChange}
                className="border p-2 rounded mb-2 w-full"
              />
              <input
                type="number"
                name="pH"
                value={systemLog.pH || ''}
                onChange={handleSystemLogChange}
                placeholder="pH"
                className="border p-2 rounded mb-2 w-full"
              />
              <input
                type="number"
                name="EC"
                value={systemLog.EC || ''}
                onChange={handleSystemLogChange}
                placeholder="EC"
                className="border p-2 rounded mb-2 w-full"
              />
              <input
                type="number"
                name="TDS"
                value={systemLog.TDS || ''}
                onChange={handleSystemLogChange}
                placeholder="TDS"
                className="border p-2 rounded mb-2 w-full"
              />
              <input
                type="number"
                name="temperature"
                value={systemLog.temperature || ''}
                onChange={handleSystemLogChange}
                placeholder="Temperature (Â°C)"
                className="border p-2 rounded mb-2 w-full"
              />
              <textarea
                name="notes"
                value={systemLog.notes}
                onChange={handleSystemLogChange}
                placeholder="Notes"
                className="border p-2 rounded mb-2 w-full"
              />
              <button
                onClick={handleSubmitSystemLog}
                className="bg-green-500 text-white p-2 rounded hover:bg-green-600"
              >
                Submit System Log
              </button>
              <button
                onClick={() => setLogType(null)}
                className="bg-gray-500 text-white p-2 rounded ml-2 hover:bg-gray-600"
              >
                Cancel
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default LogPage;
