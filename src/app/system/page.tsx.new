"use client";

import { metadata } from './metadata';
import Link from 'next/link';
import { useState } from 'react';
import { useAuth } from '@/app/components/AuthContext';
import { useRouter } from 'next/navigation';

export default function SystemPage() {
  const { user, getActiveSystem } = useAuth();
  const router = useRouter();
  const [positionsPerRow, setPositionsPerRow] = useState<number[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  const activeSystem = getActiveSystem();
  
  // Initialize positions from active system
  useState(() => {
    if (activeSystem?.system?.positionsPerRow && Array.isArray(activeSystem.system.positionsPerRow)) {
      setPositionsPerRow(activeSystem.system.positionsPerRow as number[]);
    } else {
      setPositionsPerRow([0]);
    }
  });

  const handleRowChange = (index: number, value: string) => {
    const updatedRows = [...positionsPerRow];
    updatedRows[index] = parseInt(value, 10) || 0;
    setPositionsPerRow(updatedRows);
  };

  const handleAddRow = () => {
    setPositionsPerRow([...positionsPerRow, 0]);
  };

  const handleRemoveRow = (index: number) => {
    setPositionsPerRow(positionsPerRow.filter((_, i) => i !== index));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    if (!confirm('Changing the layout will remove all plants and reset the system. Do you want to proceed?')) {
      return;
    }

    setIsSubmitting(true);

    try {
      const response = await fetch('/api/system/update', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ positionsPerRow: positionsPerRow.map(Number) })
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Failed to update system layout');
      }

      setSuccess('System layout updated successfully');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred while updating the system layout');
    } finally {
      setIsSubmitting(false);
    }
  };

  // If no user or no active system, show appropriate message
  if (!user) {
    return (
      <div className="text-center py-10">
        <p className="mb-4">You need to be logged in to view system settings.</p>
        <Link 
          href="/login"
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
        >
          Log In
        </Link>
      </div>
    );
  }

  if (!activeSystem) {
    return (
      <div className="text-center py-10">
        <p className="mb-4">You don't have an active system selected.</p>
        <Link 
          href="/system/manage"
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
        >
          Manage Systems
        </Link>
      </div>
    );
  }

  return (
    <div className="py-8">
      <div className="mb-6">
        <h1 className="text-2xl font-bold mb-2">System Settings</h1>
        <div className="flex justify-between items-center">
          <p className="text-gray-600 dark:text-gray-300">
            Active System: <span className="font-semibold">{activeSystem.system.name}</span>
          </p>
          <Link 
            href="/system/manage" 
            className="text-blue-600 dark:text-blue-400 hover:underline"
          >
            Manage All Systems â†’
          </Link>
        </div>
      </div>

      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 mb-8">
        <h2 className="text-xl font-semibold mb-4">Update System Layout</h2>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        {success && <p className="text-green-500 mb-4">{success}</p>}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-6">
            <p className="text-gray-600 dark:text-gray-300 mb-4">
              Configure your hydroponic system's layout by defining the number of plant positions in each row.
              <br />
              <span className="text-sm italic">Note: Changing the layout will remove all plants from the system.</span>
            </p>
            
            <div className="space-y-3 my-4">
              {positionsPerRow.map((positions, index) => (
                <div key={index} className="flex items-center space-x-2">
                  <label className="w-20 text-gray-700 dark:text-gray-300">Row {index + 1}:</label>
                  <input
                    type="number"
                    min="0"
                    max="24"
                    value={positions}
                    onChange={(e) => handleRowChange(index, e.target.value)}
                    className="border border-gray-300 dark:border-gray-600 rounded px-3 py-2 w-20 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                  />
                  <span className="text-gray-600 dark:text-gray-400">positions</span>
                  
                  {positionsPerRow.length > 1 && (
                    <button
                      type="button"
                      onClick={() => handleRemoveRow(index)}
                      className="text-red-500 hover:text-red-700 dark:hover:text-red-300"
                      title="Remove row"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2h6a1 1 0 100-2H7z" clipRule="evenodd" />
                      </svg>
                    </button>
                  )}
                </div>
              ))}
            </div>
            
            <button
              type="button"
              onClick={handleAddRow}
              className="text-blue-600 dark:text-blue-400 flex items-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd" />
              </svg>
              Add Row
            </button>
          </div>
          
          <div className="flex justify-end">
            <button
              type="submit"
              disabled={isSubmitting}
              className={`px-4 py-2 rounded-md ${
                isSubmitting
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-green-600 hover:bg-green-700'
              } text-white`}
            >
              {isSubmitting ? 'Updating...' : 'Update Layout'}
            </button>
          </div>
        </form>
      </div>

      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
        <h2 className="text-xl font-semibold mb-4">System Actions</h2>
        <div className="space-y-4">
          <Link href="/system/record" className="block px-4 py-2 border border-green-600 rounded text-green-600 hover:bg-green-50 dark:hover:bg-green-900/30 text-center">
            Record System Data
          </Link>
          <Link href="/system/daily" className="block px-4 py-2 border border-blue-600 rounded text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/30 text-center">
            View Daily Records
          </Link>
        </div>
      </div>
    </div>
  );
}
