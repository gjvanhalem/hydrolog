import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { getAuthenticatedUserWithSystems } from '@/lib/auth-with-systems';
import { Prisma } from '@prisma/client';
import { logger } from '@/lib/logger';

export async function POST(req: NextRequest) {
  try {
    const user = await getAuthenticatedUserWithSystems();

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get the active system
    const activeUserSystem = user.systems?.find(us => us.isActive);
    
    if (!activeUserSystem) {
      return NextResponse.json({ error: 'User does not have an active system' }, { status: 400 });
    }

    const { positionsPerRow } = await req.json();

    if (!Array.isArray(positionsPerRow) || positionsPerRow.some(pos => typeof pos !== 'number')) {
      return NextResponse.json({ error: 'Invalid positionsPerRow format' }, { status: 400 });
    }

    const systemId = activeUserSystem.systemId;

    // Remove all plants associated with the system
    await prisma.plant.deleteMany({
      where: {
        systemId,
      },
    });

    // Update the system layout
    const updatedSystem = await prisma.system.update({
      where: { id: systemId },
      data: { 
        positionsPerRow: positionsPerRow as Prisma.InputJsonValue,
        rows: positionsPerRow.length 
      },
    });

    return NextResponse.json({ success: true, system: updatedSystem });
  } catch (error) {
    logger.error('Error updating system layout:', {
      error: error instanceof Error ? { message: error.message, stack: error.stack } : String(error)
    });
    return NextResponse.json({ error: 'Failed to update system layout' }, { status: 500 });
  }
}
