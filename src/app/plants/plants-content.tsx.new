'use client';

import Link from 'next/link';
import { useEffect, useState } from 'react';
import PlantPositionGrid from '@/app/components/PlantPositionGrid';
import RemoveAllPlantsButton from '@/app/components/RemoveAllPlantsButton';
import { useAuth } from '@/app/components/AuthContext';
import { useRouter } from 'next/navigation';

type Plant = {
  id: number;
  name: string;
  type: string;
  position: number | null;
  status: string;
  startDate: Date;
  systemId: number;
  userId: number;
  createdAt: Date;
  updatedAt: Date;
};

type System = {
  id: number;
  name: string;
  positionsPerRow: number[];
};

export default function PlantsContent() {
  const { user, getActiveSystem } = useAuth();
  const router = useRouter();
  const [plants, setPlants] = useState<Plant[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [formError, setFormError] = useState('');
  const [isAddingPlant, setIsAddingPlant] = useState(false);
  const [formData, setFormData] = useState({ name: '', type: 'Lettuce', position: 1 });
  
  // Get the active system
  const activeUserSystem = getActiveSystem();
  const system = activeUserSystem?.system;

  useEffect(() => {
    if (!user) {
      return; // Don't fetch data if user is not logged in
    }
    
    if (!activeUserSystem) {
      return; // Don't fetch data if no active system
    }

    const fetchData = async () => {
      try {
        const plantsResponse = await fetch('/api/plants');

        if (!plantsResponse.ok) {
          throw new Error('Failed to load plants data');
        }

        const plantsData = await plantsResponse.json();
        setPlants(plantsData);
      } catch (err) {
        setError('Failed to load plants data');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [user, activeUserSystem]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: name === 'position' ? parseInt(value) : value
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setFormError('');
    
    try {
      const response = await fetch('/api/plants', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      
      const result = await response.json();
      
      if (!response.ok) {
        setFormError(result.error || 'Failed to add plant');
        return;
      }
      
      // Add the new plant to the state
      setPlants([...plants, result]);
      
      // Reset form
      setFormData({ name: '', type: 'Lettuce', position: 1 });
      setIsAddingPlant(false);
    } catch (err) {
      setFormError('An unexpected error occurred');
    }
  };

  // If user is not logged in
  if (!user) {
    return (
      <div className="text-center py-10">
        <p className="mb-4">You need to be logged in to view plants.</p>
        <Link 
          href="/login"
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
        >
          Log In
        </Link>
      </div>
    );
  }
  
  // If no active system is selected
  if (!system) {
    return (
      <div className="text-center py-10">
        <p className="mb-4">You don't have an active system selected.</p>
        <Link 
          href="/system/manage"
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
        >
          Manage Systems
        </Link>
      </div>
    );
  }

  // Get the total positions in the system
  const totalPositions = system.positionsPerRow ? 
    (system.positionsPerRow as number[]).reduce((a, b) => a + b, 0) : 0;
  
  // Get all available positions
  const occupiedPositions = plants
    .filter(p => p.status !== 'removed')
    .map(p => p.position);
  
  const availablePositions = Array.from(
    { length: totalPositions }, 
    (_, i) => i + 1
  ).filter(pos => !occupiedPositions.includes(pos));

  if (loading) {
    return (
      <div className="container mx-auto p-4">
        <h1 className="text-2xl font-bold mb-6">Plants</h1>
        <div className="flex justify-center items-center h-64">
          <p>Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Plants in {system.name}</h1>
        <div className="space-x-2">
          <button 
            onClick={() => setIsAddingPlant(!isAddingPlant)}
            className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
          >
            {isAddingPlant ? 'Cancel' : 'Add Plant'}
          </button>
          
          {plants.length > 0 && <RemoveAllPlantsButton onRemove={() => setPlants([])} />}
        </div>
      </div>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      {isAddingPlant && (
        <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">Add New Plant</h2>
          
          {formError && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
              {formError}
            </div>
          )}
          
          <form onSubmit={handleSubmit}>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-2">Plant Name</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md"
                  required
                />
              </div>
              
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-2">Plant Type</label>
                <select
                  name="type"
                  value={formData.type}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md"
                >
                  <option value="Lettuce">Lettuce</option>
                  <option value="Kale">Kale</option>
                  <option value="Spinach">Spinach</option>
                  <option value="Basil">Basil</option>
                  <option value="Mint">Mint</option>
                  <option value="Tomato">Tomato</option>
                  <option value="Pepper">Pepper</option>
                  <option value="Other">Other</option>
                </select>
              </div>
              
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-2">Position</label>
                <select
                  name="position"
                  value={formData.position}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md"
                >
                  {availablePositions.length > 0 ? (
                    availablePositions.map(pos => (
                      <option key={pos} value={pos}>Position {pos}</option>
                    ))
                  ) : (
                    <option value="">No positions available</option>
                  )}
                </select>
              </div>
            </div>
            
            <div className="mt-4">
              <button
                type="submit"
                disabled={availablePositions.length === 0}
                className={`px-4 py-2 rounded-md ${
                  availablePositions.length === 0
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-green-600 hover:bg-green-700'
                } text-white`}
              >
                Add Plant
              </button>
            </div>
          </form>
        </div>
      )}
      
      {plants.length > 0 ? (
        <div>
          <PlantPositionGrid
            plants={plants}
            positionsPerRow={system.positionsPerRow as number[]}
          />
          
          <div className="mt-8">
            <h2 className="text-xl font-semibold mb-4">Plant List</h2>
            <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
              <table className="min-w-full">
                <thead>
                  <tr className="bg-gray-100 dark:bg-gray-700">
                    <th className="px-4 py-2 text-left">Position</th>
                    <th className="px-4 py-2 text-left">Name</th>
                    <th className="px-4 py-2 text-left">Type</th>
                    <th className="px-4 py-2 text-left">Start Date</th>
                    <th className="px-4 py-2 text-left">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {plants
                    .filter(plant => plant.status !== 'removed')
                    .sort((a, b) => (a.position || 0) - (b.position || 0))
                    .map(plant => (
                      <tr key={plant.id} className="border-t border-gray-200 dark:border-gray-700">
                        <td className="px-4 py-3">P{plant.position}</td>
                        <td className="px-4 py-3">{plant.name}</td>
                        <td className="px-4 py-3">{plant.type}</td>
                        <td className="px-4 py-3">
                          {new Date(plant.startDate).toLocaleDateString()}
                        </td>
                        <td className="px-4 py-3">
                          <Link
                            href={`/plants/${plant.id}`}
                            className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
                          >
                            View/Edit
                          </Link>
                        </td>
                      </tr>
                    ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      ) : (
        <div className="text-center py-8 bg-white dark:bg-gray-800 shadow-md rounded-lg">
          <p className="text-gray-600 dark:text-gray-400">No plants added yet.</p>
          <button 
            onClick={() => setIsAddingPlant(true)}
            className="mt-4 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
          >
            Add Your First Plant
          </button>
        </div>
      )}
    </div>
  );
}
